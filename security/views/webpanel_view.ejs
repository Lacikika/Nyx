<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>View <%= file %> - Nyx Bot Panel</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600&display=swap" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      color: #333;
      line-height: 1.6;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 2rem;
    }

    .header {
      text-align: center;
      margin-bottom: 3rem;
      color: white;
    }

    .header h1 {
      font-size: 2.5rem;
      font-weight: 700;
      margin-bottom: 0.5rem;
      text-shadow: 0 2px 4px rgba(0,0,0,0.3);
      word-break: break-all;
    }

    .file-path {
      background: rgba(255, 255, 255, 0.2);
      padding: 0.5rem 1rem;
      border-radius: 20px;
      font-weight: 500;
      display: inline-block;
      margin-top: 0.5rem;
      font-family: 'JetBrains Mono', monospace;
    }

    .nav-links {
      display: flex;
      justify-content: center;
      gap: 1rem;
      margin-bottom: 2rem;
      flex-wrap: wrap;
    }

    .nav-link {
      padding: 0.75rem 1.5rem;
      background: rgba(255, 255, 255, 0.2);
      color: white;
      text-decoration: none;
      border-radius: 25px;
      font-weight: 500;
      transition: all 0.3s ease;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255,255,255,0.3);
    }

    .nav-link:hover {
      background: rgba(255, 255, 255, 0.3);
      transform: translateY(-2px);
    }

    .file-info {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 20px;
      padding: 2rem;
      margin-bottom: 2rem;
      box-shadow: 0 8px 32px rgba(0,0,0,0.1);
      border: 1px solid rgba(255,255,255,0.2);
    }

    .info-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1.5rem;
    }

    .info-item {
      display: flex;
      align-items: center;
      gap: 1rem;
      padding: 1rem;
      background: #f8f9fa;
      border-radius: 12px;
      border-left: 4px solid #667eea;
    }

    .info-icon {
      font-size: 1.5rem;
      background: linear-gradient(135deg, #667eea, #764ba2);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .info-content {
      flex: 1;
    }

    .info-label {
      font-weight: 600;
      color: #333;
      margin-bottom: 0.25rem;
      font-size: 0.9rem;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .info-value {
      color: #666;
      font-size: 1rem;
    }

    .json-viewer {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 20px;
      overflow: hidden;
      box-shadow: 0 8px 32px rgba(0,0,0,0.1);
      border: 1px solid rgba(255,255,255,0.2);
      margin-bottom: 2rem;
    }

    .json-header {
      background: linear-gradient(135deg, #2d3748, #4a5568);
      color: white;
      padding: 1.5rem 2rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
      border-bottom: 1px solid rgba(255,255,255,0.1);
    }

    .json-title {
      display: flex;
      align-items: center;
      gap: 1rem;
      font-size: 1.2rem;
      font-weight: 600;
    }

    .json-actions {
      display: flex;
      gap: 0.5rem;
    }

    .json-btn {
      padding: 0.5rem 1rem;
      background: rgba(255, 255, 255, 0.2);
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 0.85rem;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .json-btn:hover {
      background: rgba(255, 255, 255, 0.3);
    }

    .json-content {
      background: #1a202c;
      color: #e2e8f0;
      font-family: 'JetBrains Mono', 'Consolas', monospace;
      font-size: 0.9rem;
      line-height: 1.6;
      padding: 2rem;
      max-height: 600px;
      overflow: auto;
      white-space: pre-wrap;
      word-break: break-word;
    }

    .json-content::-webkit-scrollbar {
      width: 8px;
    }

    .json-content::-webkit-scrollbar-track {
      background: #2d3748;
    }

    .json-content::-webkit-scrollbar-thumb {
      background: #4a5568;
      border-radius: 4px;
    }

    .json-content::-webkit-scrollbar-thumb:hover {
      background: #718096;
    }

    /* JSON syntax highlighting */
    .json-key { color: #63b3ed; }
    .json-string { color: #68d391; }
    .json-number { color: #f6e05e; }
    .json-boolean { color: #fc8181; }
    .json-null { color: #a0aec0; }

    .back-link {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 1rem 2rem;
      background: rgba(255, 255, 255, 0.2);
      color: white;
      text-decoration: none;
      border-radius: 25px;
      font-weight: 500;
      transition: all 0.3s ease;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255,255,255,0.3);
    }

    .back-link:hover {
      background: rgba(255, 255, 255, 0.3);
      transform: translateY(-2px);
    }

    .copy-notification {
      position: fixed;
      top: 20px;
      right: 20px;
      background: #48bb78;
      color: white;
      padding: 1rem 1.5rem;
      border-radius: 12px;
      box-shadow: 0 8px 25px rgba(0,0,0,0.2);
      transform: translateX(400px);
      transition: all 0.3s ease;
      z-index: 1000;
    }

    .copy-notification.show {
      transform: translateX(0);
    }

    @media (max-width: 768px) {
      .container {
        padding: 1rem;
      }

      .header h1 {
        font-size: 1.8rem;
      }

      .json-header {
        padding: 1rem;
        flex-direction: column;
        gap: 1rem;
        align-items: flex-start;
      }

      .json-content {
        font-size: 0.8rem;
        padding: 1rem;
      }

      .info-grid {
        grid-template-columns: 1fr;
      }
    }

    .loading {
      display: inline-block;
      width: 16px;
      height: 16px;
      border: 2px solid rgba(255,255,255,.3);
      border-radius: 50%;
      border-top-color: #fff;
      animation: spin 1s ease-in-out infinite;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1><i class="fas fa-file-code"></i> <%= file %></h1>
      <div class="file-path">
        <i class="fas fa-folder"></i> <%= type %>/<%= file %>
      </div>
    </div>

    <div class="nav-links">
      <a href="/" class="nav-link"><i class="fas fa-home"></i> Dashboard</a>
      <a href="/statistics" class="nav-link"><i class="fas fa-chart-bar"></i> Statistics</a>
      <a href="/console" class="nav-link"><i class="fas fa-terminal"></i> Console</a>
      <a href="/blank" class="nav-link"><i class="fas fa-cog"></i> Settings</a>
    </div>

    <div class="file-info">
      <div class="info-grid">
        <div class="info-item">
          <div class="info-icon"><i class="fas fa-file"></i></div>
          <div class="info-content">
            <div class="info-label">File Name</div>
            <div class="info-value"><%= file %></div>
          </div>
        </div>
        <div class="info-item">
          <div class="info-icon"><i class="fas fa-folder"></i></div>
          <div class="info-content">
            <div class="info-label">Type</div>
            <div class="info-value"><%= type.charAt(0).toUpperCase() + type.slice(1) %></div>
          </div>
        </div>
        <div class="info-item">
          <div class="info-icon"><i class="fas fa-code"></i></div>
          <div class="info-content">
            <div class="info-label">Format</div>
            <div class="info-value">Encrypted JSON</div>
          </div>
        </div>
        <div class="info-item">
          <div class="info-icon"><i class="fas fa-shield-alt"></i></div>
          <div class="info-content">
            <div class="info-label">Security</div>
            <div class="info-value">AES-256 Encrypted</div>
          </div>
        </div>
      </div>
    </div>

    <div class="json-viewer">
      <div class="json-header">
        <div class="json-title">
          <i class="fas fa-code"></i>
          Decrypted Content
        </div>
        <div class="json-actions">
          <button class="json-btn" onclick="copyToClipboard()">
            <i class="fas fa-copy"></i>
            Copy
          </button>
          <button class="json-btn" onclick="downloadFile()">
            <i class="fas fa-download"></i>
            Download
          </button>
          <button class="json-btn" onclick="toggleFormat()">
            <i class="fas fa-compress-alt"></i>
            Compact
          </button>
        </div>
      </div>
      <div class="json-content" id="jsonContent"><%- JSON.stringify(json, null, 2).replace(/</g, '&lt;').replace(/>/g, '&gt;') %></div>
    </div>

    <a href="/" class="back-link">
      <i class="fas fa-arrow-left"></i>
      Back to Dashboard
    </a>
  </div>

  <div class="copy-notification" id="copyNotification">
    <i class="fas fa-check"></i> Copied to clipboard!
  </div>

  <script>
    let isCompact = false;
    const originalJson = <%- JSON.stringify(json) %>;

    function copyToClipboard() {
      const content = document.getElementById('jsonContent').textContent;
      navigator.clipboard.writeText(content).then(() => {
        showNotification();
      }).catch(() => {
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = content;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        showNotification();
      });
    }

    function showNotification() {
      const notification = document.getElementById('copyNotification');
      notification.classList.add('show');
      setTimeout(() => {
        notification.classList.remove('show');
      }, 3000);
    }

    function downloadFile() {
      const content = JSON.stringify(originalJson, null, 2);
      const blob = new Blob([content], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = '<%= file %>';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }

    function toggleFormat() {
      const content = document.getElementById('jsonContent');
      const btn = event.target.closest('.json-btn');
      
      if (isCompact) {
        content.textContent = JSON.stringify(originalJson, null, 2);
        btn.innerHTML = '<i class="fas fa-compress-alt"></i> Compact';
        isCompact = false;
      } else {
        content.textContent = JSON.stringify(originalJson);
        btn.innerHTML = '<i class="fas fa-expand-alt"></i> Pretty';
        isCompact = true;
      }
    }

    // Syntax highlighting
    function highlightJson() {
      const content = document.getElementById('jsonContent');
      let html = content.innerHTML;
      
      // Highlight strings
      html = html.replace(/"([^"\\]*(\\.[^"\\]*)*)"/g, '<span class="json-string">"$1"</span>');
      
      // Highlight numbers
      html = html.replace(/\b(-?\d+\.?\d*)\b/g, '<span class="json-number">$1</span>');
      
      // Highlight booleans
      html = html.replace(/\b(true|false)\b/g, '<span class="json-boolean">$1</span>');
      
      // Highlight null
      html = html.replace(/\bnull\b/g, '<span class="json-null">null</span>');
      
      content.innerHTML = html;
    }

    // Apply syntax highlighting on load
    document.addEventListener('DOMContentLoaded', function() {
      highlightJson();
      
      // Add loading animation to buttons
      const buttons = document.querySelectorAll('.json-btn');
      buttons.forEach(btn => {
        btn.addEventListener('click', function() {
          const originalContent = this.innerHTML;
          this.innerHTML = '<div class="loading"></div>';
          setTimeout(() => {
            this.innerHTML = originalContent;
          }, 500);
        });
      });
    });
  </script>
</body>
</html>